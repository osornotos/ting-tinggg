package main

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	htgotts "github.com/hegedustibor/htgo-tts"
	"github.com/hegedustibor/htgo-tts/handlers"
	"github.com/hegedustibor/htgo-tts/voices"
)

func main() {
	router := gin.Default()
	router.POST("/ting-tinggg", notify)
	router.Run("localhost:8080")
}

type AutoGenerated struct {
	Error int `json:"error"`
	Data  struct {
		Id                     int    `json:"id"`
		Reference              string `json:"reference"`
		Description            string `json:"description"`
		Amount                 int    `json:"amount"`
		RunningBalance         int    `json:"runningBalance"`
		TransactionDateTime    string `json:"transactionDateTime"`
		AccountNumber          string `json:"accountNumber"`
		BankName               string `json:"bankName"`
		BankAbbreviation       string `json:"bankAbbreviation"`
		VirtualAccountNumber   string `json:"virtualAccountNumber"`
		VirtualAccountName     string `json:"virtualAccountName"`
		CounterAccountName     string `json:"counterAccountName"`
		CounterAccountNumber   string `json:"counterAccountNumber"`
		CounterAccountBankID   string `json:"counterAccountBankId"`
		CounterAccountBankName string `json:"counterAccountBankName"`
	} `json:"data"`
}

func notify(c *gin.Context) {
	err := notifyPayment("Đã nhận 500k")
	if err != nil {
		fmt.Println("Error:", err)
		return
	}
	c.IndentedJSON(http.StatusOK, nil)
}

// TTSRequest defines the JSON payload for the API request
type TTSRequest struct {
	Text  string `json:"text"`
	Voice string `json:"voice"`
}

// Function to generate speech from text
func notifyPayment(text string) error {
	fmt.Println("Generating speech:", text)
	speech := htgotts.Speech{Folder: "audio", Language: voices.Vietnamese, Handler: &handlers.Native{}}
	speech.Speak(text)
	return nil
}
